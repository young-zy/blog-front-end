@use '~@angular/material' as mat;
@use 'sass:map';
@use 'sass:meta';
@use '~@angular/material/core/theming/palette';
/* You can add global styles to this file, and also import other style files */

$mat-black-theme-foreground: (
  base: white,
  divider: rgba(white, 0.12),
  dividers: rgba(white, 0.12),
  disabled: rgba(white, 0.5),
  disabled-button: rgba(white, 0.3),
  disabled-text: rgba(white, 0.5),
  elevation: black,
  hint-text: rgba(white, 0.5),
  secondary-text: rgba(white, 0.7),
  icon: white,
  icons: white,
  text: white,
  slider-min: white,
  slider-off: rgba(white, 0.3),
  slider-off-active: rgba(white, 0.3),
);

// Background palette for dark themes.
$mat-black-theme-background: (
  status-bar: black,
  app-bar: map-get(mat.$grey-palette, 900),
  background: black,
  hover: rgba(white, 0.04),
  card: map-get(mat.$grey-palette, 900),
  dialog: map-get(mat.$grey-palette, 900),
  disabled-button: rgba(white, 0.12),
  raised-button: map-get(mat.$grey-palette, 800),
  focused-button: rgba(white, 0.12),
  selected-button: map-get(mat.$grey-palette, 900),
  selected-disabled-button: map-get(mat.$grey-palette, 800),
  disabled-button-toggle: black,
  unselected-chip: map-get(mat.$grey-palette, 700),
  disabled-list-option: black,
  tooltip: map-get(mat.$grey-palette, 700),
);

@function _mat-create-black-color-config($primary, $accent, $warn: null) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: if($warn != null, $warn, mat.define-palette(mat.$red-palette)),
    is-dark: true,
    foreground: $mat-black-theme-foreground,
    background: $mat-black-theme-background,
  );
}


// Creates a container object for a dark theme to be given to individual component theme mixins.
// as it would break existing apps that set the parameter by name.
@function mat-black-theme($primary, $accent: null, $warn: mat.define-palette(mat.$red-palette)) {
  // This function creates a container object for the individual component theme mixins. Consumers
  // can construct such an object by calling this function, or by building the object manually.
  // There are two possible ways to invoke this function in order to create such an object:
  //
  //    (1) Passing in a map that holds optional configurations for individual parts of the
  //        theming system. For `color` configurations, the function only expects the palettes
  //        for `primary` and `accent` (and optionally `warn`). The function will expand the
  //        shorthand into an actual configuration that can be consumed in `-color` mixins.
  //    (2) Legacy pattern: Passing in the palettes as parameters. This is not as flexible
  //        as passing in a configuration map because only the `color` system can be configured.
  //
  // If the legacy pattern is used, we generate a container object only with a dark-themed
  // configuration for the `color` theming part.
  @if $accent != null {
    @return (
      color: _mat-create-black-color-config($primary, $accent, $warn),
    );
  }
  // If the map pattern is used (1), we just pass-through the configurations for individual
  // parts of the theming system, but update the `color` configuration if set. As explained
  // above, the color shorthand will be expanded to an actual dark-themed color configuration.
  $result: $primary;
  @if map-get($primary, color) {
    $color-settings: map-get($primary, color);
    $primary: map-get($color-settings, primary);
    $accent: map-get($color-settings, accent);
    $warn: map-get($color-settings, warn);
    $result: map-merge($result, (color: _mat-create-black-color-config($primary, $accent, $warn)));
  }
  @return $result;
}

@include mat.core();

$indigo-pink-primary: mat.define-palette(mat.$indigo-palette);
$indigo-pink-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
$indigo-pink-theme: mat.define-light-theme($indigo-pink-primary, $indigo-pink-accent);

//@include mat.all-component-themes($indigo-pink-theme);

$blue-gray-primary: mat.define-palette(mat.$blue-grey-palette);
$blue-gray-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);
$blue-gray-warn: mat.define-palette(mat.$deep-orange-palette);
$blue-gray-theme: mat.define-dark-theme($blue-gray-primary, $blue-gray-accent, $blue-gray-warn);

$blue-gray-black-primary: mat.define-palette(mat.$grey-palette, 900, 700, 900, 500);
$blue-gray-black-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);
$blue-gray-black-warn: mat.define-palette(mat.$deep-orange-palette);
$blue-gray-black-theme: mat-black-theme($blue-gray-black-primary, $blue-gray-black-accent, $blue-gray-black-warn);

$black-progress-bar-primary: mat.define-palette(mat.$grey-palette, 100, 700, 100, 500);
$black-progress-bar-theme: mat-black-theme($black-progress-bar-primary, $blue-gray-black-accent, $blue-gray-black-warn);


@include mat.all-component-themes($indigo-pink-theme);

.blue-gray {
  @include mat.all-component-colors($blue-gray-theme);
  $theme: 'blue-gray'
}

.indigo-pink {
  //@include mat.all-component-colors($indigo-pink-theme);
}

.black {
  @include mat.all-component-colors($blue-gray-black-theme);
  @include mat.progress-bar-color($black-progress-bar-theme)
}

html, body {
  height: 100%;
  margin: 0;
}

//body { margin: 0; font-family: Roboto, 'Noto Sans SC', "Helvetica Neue", sans-serif; }

// Define a custom typography config that overrides the font-family as well as the
// `headlines` and `body-1` levels.
$custom-typography: mat.define-typography-config(
  $font-family: 'Roboto, Noto Sans SC,  monospace',
);

@include mat.all-component-typographies($custom-typography);

.cdk-overlay-container {
  .blue-gray & {
    color: white;
  }

  .black & {
    color: lightgray;
  }

  .indigo-pink & {
    color: darkslategray;
  }
}
